package pageClasses;

import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class LoginPage {
    WebDriver driver;
    WebDriverWait wait;

    // Web elements
    @FindBy(id = "user-name")
    WebElement usernameField;

    @FindBy(id = "password")
    WebElement passwordField;

    @FindBy(id = "login-button")
    WebElement loginButton;

    @FindBy(css = ".error-button")
    WebElement buttonError;

    @FindBy(css = ".error-message-container.error")
    WebElement errorMessage;

    /**
     * Constructor initializes WebDriver and WebDriverWait,
     * and initializes web elements using PageFactory.
     *
     * @param driver WebDriver instance to be used
     */
    public LoginPage(WebDriver driver) {
        this.driver = driver;
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        PageFactory.initElements(driver, this);
    }

    /**
     * Enters the username into the username input field.
     * Waits until the field is visible before typing.
     *
     * @param username the username to enter
     */
    public void loginUsername(String username) {
        wait.until(ExpectedConditions.visibilityOf(usernameField));
        usernameField.sendKeys(username);
    }

    /**
     * Enters the password into the password input field.
     * Waits until the field is visible before typing.
     *
     * @param password the password to enter
     */
    public void loginPassword(String password) {
        wait.until(ExpectedConditions.visibilityOf(passwordField));
        passwordField.sendKeys(password);
    }

    /**
     * Clicks the login button to submit the login form.
     * Waits until the button is clickable before clicking.
     */
    public void clickButtonLogin() {
        wait.until(ExpectedConditions.elementToBeClickable(loginButton));
        loginButton.click();
    }

    /**
     * Returns the error message text displayed after a failed login attempt.
     * Waits until the error message is visible before retrieving text.
     *
     * @return error message text
     */
    public String getErrorMessage() {
        wait.until(ExpectedConditions.visibilityOf(errorMessage));
        return errorMessage.getText();
    }

    /**
     * Clicks the error message close button to dismiss the error popup.
     * Waits until the button is clickable before clicking.
     */
    public void clickErrorButton() {
        wait.until(ExpectedConditions.elementToBeClickable(buttonError));
        buttonError.click();
    }
}
